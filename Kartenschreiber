// Bibliotheken für RFID-Reader und SPI-Kommunikation
#include <SPI.h>        // SPI-Kommunikation zwischen Arduino und RFID-Reader
#include <MFRC522.h>    // MFRC522 RFID-Reader/Writer Bibliothek

// Pin-Definitionen für RFID-Reader
#define SS_PIN 10       // Slave Select Pin für SPI-Kommunikation
#define RST_PIN 9       // Reset Pin für RFID-Reader

// RFID-Objekt und Konfiguration
MFRC522 mfrc522(SS_PIN, RST_PIN);    // RFID-Reader/Writer Objekt erstellen
byte block = 1;                      // Block 1 der RFID-Karte für Schreibvorgänge
MFRC522::MIFARE_Key key;             // Authentifizierungs-Schlüssel für MIFARE-Karten

// Eingabe-Verwaltung
char inputBuffer[17];                // Puffer für Benutzereingabe (max 16 Zeichen + Nullterminator)
bool dataReady = false;              // Flag: true wenn Text zum Schreiben bereit ist

void setup() {
  // Kommunikation initialisieren
  Serial.begin(9600);                // Serielle Verbindung zum PC mit 9600 Baud
  SPI.begin();                       // SPI-Kommunikation für RFID-Reader starten
  mfrc522.PCD_Init();                // RFID-Reader initialisieren
  
  // Benutzer-Interface
  Serial.println(">> RFID-Schreibmodus <<");
  Serial.println("Gib ein Wort mit max. 16 Zeichen ein und drücke ENTER:");
  
  // Standard MIFARE-Schlüssel initialisieren (Werkszustand)
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;           // Alle 6 Bytes des Schlüssels auf 0xFF setzen
  }
}

void loop() {
  // Benutzereingabe über serielle Schnittstelle verarbeiten
  if (Serial.available()) {
    // Text bis zum Zeilenwechsel ('\n') lesen, maximal 16 Zeichen
    int len = Serial.readBytesUntil('\n', inputBuffer, 16);
    inputBuffer[len] = '\0';         // Null-Terminierung für gültigen C-String
    dataReady = true;                // Markierung: Text ist bereit zum Schreiben
    
    // Bestätigung der Eingabe
    Serial.print("Bereit zum Schreiben: ");
    Serial.println(inputBuffer);
    Serial.println("Lege nun eine Karte auf.");
  }
  
  // Schreibvorgang nur wenn Daten bereit sind UND Karte erkannt wird
  if (dataReady && 
      mfrc522.PICC_IsNewCardPresent() &&     // Neue Karte in Reichweite?
      mfrc522.PICC_ReadCardSerial()) {       // Karten-UID erfolgreich gelesen?
    
    // Schritt 1: Authentifizierung mit der Karte
    MFRC522::StatusCode status = mfrc522.PCD_Authenticate(
      MFRC522::PICC_CMD_MF_AUTH_KEY_A,       // Authentifizierungs-Kommando (Key A)
      block,                                 // Block-Nummer (Block 1)
      &key,                                  // Authentifizierungs-Schlüssel
      &(mfrc522.uid)                         // Karten-UID
    );
    
    // Prüfen ob Authentifizierung erfolgreich war
    if (status != MFRC522::STATUS_OK) {
      Serial.print("Authentifizierungsfehler: ");
      Serial.println(mfrc522.GetStatusCodeName(status));
      return;                                // Abbruch bei Authentifizierungsfehler
    }
    
    // Schritt 2: Block vor dem Schreiben leeren (optional, aber sauber)
    byte emptyBlock[16];
    for (int i = 0; i < 16; i++) {
      emptyBlock[i] = ' ';                   // Block mit Leerzeichen füllen
      // Alternative: emptyBlock[i] = 0x00;  // oder mit Nullbytes
    }
    
    // Leeren Block auf die Karte schreiben
    status = mfrc522.MIFARE_Write(block, emptyBlock, 16);
    if (status != MFRC522::STATUS_OK) {
      Serial.print("Fehler beim Löschen des Blocks: ");
      Serial.println(mfrc522.GetStatusCodeName(status));
      // Aufräumen bei Fehler
      mfrc522.PICC_HaltA();
      mfrc522.PCD_StopCrypto1();
      return;
    }
    
    // Schritt 3: Benutzereingabe für RFID-Schreibung vorbereiten
    byte buffer[16];                         // 16-Byte Schreibpuffer (MIFARE-Blockgröße)
    for (int i = 0; i < 16; i++) {
      if (i < strlen(inputBuffer)) {
        buffer[i] = inputBuffer[i];          // Eingabetext in Puffer kopieren
      } else {
        buffer[i] = ' ';                     // Restliche Bytes mit Leerzeichen auffüllen
      }
    }
    
    // Schritt 4: Daten auf die Karte schreiben
    status = mfrc522.MIFARE_Write(block, buffer, 16);
    if (status == MFRC522::STATUS_OK) {
      Serial.println(">> Schreiben erfolgreich!");
    } else {
      Serial.print("Schreibfehler: ");
      Serial.println(mfrc522.GetStatusCodeName(status));
    }
    
    // Schritt 5: Aufräumen nach Schreibvorgang
    mfrc522.PICC_HaltA();                    // Karte in Schlafmodus versetzen
    mfrc522.PCD_StopCrypto1();               // Kryptographie-Einheit stoppen
    dataReady = false;                       // Daten-Flag zurücksetzen
    Serial.println("Gib ein neues Wort ein:");
  }
}
