#include <Servo.h>                    // Servo-Bibliothek für Motorsteuerung

// Pin-Definitionen für bessere Lesbarkeit
const int pirPin = 2;                 // PIR Motion Sensor an Digital Pin 2
const int ledPin = 5;                 // LED an Digital Pin 5
const int buttonPin = 7;              // Taster an Digital Pin 7
const int servoPin = 9;               // Servo an PWM Pin 9

// Zustandsvariablen
int lastPIRState = LOW;               // Vorheriger PIR-Zustand für Änderungserkennung
bool ledState = false;                // Aktueller LED-Status
Servo myServo;                        // Servo-Objekt erstellen

// Button-Entprellung (Debouncing)
bool lastButtonState = HIGH;          // Vorheriger Button-Zustand
bool buttonState = HIGH;              // Aktueller stabiler Button-Zustand
bool servoActivated = false;          // Servo-Aktivierungsstatus
unsigned long lastDebounceTime = 0;   // Zeitstempel für Entprellung
const unsigned long debounceDelay = 50; // Entprellungszeit in Millisekunden

void setup() {
  // Pin-Modi definieren
  pinMode(pirPin, INPUT);             // PIR als Input
  pinMode(ledPin, OUTPUT);            // LED als Output
  pinMode(buttonPin, INPUT_PULLUP);   // Button mit internem Pull-up Widerstand
  
  // Servo initialisieren
  myServo.attach(servoPin);           // Servo an Pin anhängen
  myServo.write(0);                   // Startposition: Schloss geschlossen
  
  // Serielle Kommunikation für Debugging
  Serial.begin(9600);
  Serial.println("Arduino Motion Puzzle Ready!");
}

void loop() {
  // PIR-Sensor auslesen
  int pirState = digitalRead(pirPin);
  int buttonReading = digitalRead(buttonPin);
  
  // PIR-Logik: Bewegungserkennung
  if (pirState == HIGH && lastPIRState == LOW) {
    Serial.println("Motion detected!");
    digitalWrite(ledPin, HIGH);        // LED einschalten
    ledState = true;
    lastPIRState = HIGH;
  } else if (pirState == LOW && lastPIRState == HIGH) {
    Serial.println("No motion.");
    digitalWrite(ledPin, LOW);         // LED ausschalten
    ledState = false;
    lastPIRState = LOW;
  }
  
  // Button-Entprellung (Debounce-Algorithmus)
  if (buttonReading != lastButtonState) {
    lastDebounceTime = millis();       // Zeitstempel setzen
  }
  
  // Prüfung nach Ablauf der Entprellungszeit
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (buttonReading != buttonState) {
      buttonState = buttonReading;
      
      // Button-Druck erkennen (HIGH→LOW) während LED aktiv
      if (buttonState == LOW && ledState) {
        Serial.println("Button pressed while LED is on!");
        servoActivated = !servoActivated;  // Toggle Servo-Status
        
        if (servoActivated) {
          Serial.println("Servo activated!");
          myServo.write(90);           // Schloss öffnen (90°)
        } else {
          Serial.println("Servo reset!");
          myServo.write(0);            // Schloss schließen (0°)
        }
      }
    }
  }
  
  lastButtonState = buttonReading;
}
